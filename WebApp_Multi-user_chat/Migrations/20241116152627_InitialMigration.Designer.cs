// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp_Multi_user_chat.Data;

#nullable disable

namespace WebApp_Multi_user_chat.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20241116152627_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApp_Multi_user_chat.Entities.ChatHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("HistoryId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("ChatHistory");

                    b.HasData(
                        new
                        {
                            HistoryId = 1,
                            ChatRoomId = 1,
                            LastUpdated = new DateTime(2024, 11, 16, 18, 26, 27, 209, DateTimeKind.Local).AddTicks(2142)
                        },
                        new
                        {
                            HistoryId = 2,
                            ChatRoomId = 2,
                            LastUpdated = new DateTime(2024, 11, 16, 18, 26, 27, 209, DateTimeKind.Local).AddTicks(2144)
                        });
                });

            modelBuilder.Entity("WebApp_Multi_user_chat.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChatHistoryHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatHistoryHistoryId");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatRoomId = 1,
                            Message = "Hello everyone!",
                            TimeStamp = new DateTime(2024, 11, 16, 18, 26, 27, 209, DateTimeKind.Local).AddTicks(2167),
                            UserId = "user1"
                        },
                        new
                        {
                            Id = 2,
                            ChatRoomId = 1,
                            Message = "Good morning Alice!",
                            TimeStamp = new DateTime(2024, 11, 16, 18, 26, 27, 209, DateTimeKind.Local).AddTicks(2169),
                            UserId = "user2"
                        },
                        new
                        {
                            Id = 3,
                            ChatRoomId = 2,
                            Message = "Who won the match yesterday?",
                            TimeStamp = new DateTime(2024, 11, 16, 18, 26, 27, 209, DateTimeKind.Local).AddTicks(2170),
                            UserId = "user1"
                        });
                });

            modelBuilder.Entity("WebApp_Multi_user_chat.Entities.ChatRoom", b =>
                {
                    b.Property<int>("ChatRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatRoomId"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ChatRoomId");

                    b.ToTable("ChatRooms");

                    b.HasData(
                        new
                        {
                            ChatRoomId = 1,
                            LastUpdated = new DateTime(2024, 11, 16, 18, 26, 27, 209, DateTimeKind.Local).AddTicks(2106),
                            RoomName = "General"
                        },
                        new
                        {
                            ChatRoomId = 2,
                            LastUpdated = new DateTime(2024, 11, 16, 18, 26, 27, 209, DateTimeKind.Local).AddTicks(2118),
                            RoomName = "Sports"
                        });
                });

            modelBuilder.Entity("WebApp_Multi_user_chat.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            Message = "New user Alice joined the room",
                            NotificationType = "Join",
                            RoomName = "General",
                            TimeStamp = new DateTime(2024, 11, 16, 18, 26, 27, 209, DateTimeKind.Local).AddTicks(2199),
                            UserId = "user1"
                        },
                        new
                        {
                            NotificationId = 2,
                            Message = "New user Bob joined the room",
                            NotificationType = "Join",
                            RoomName = "Sports",
                            TimeStamp = new DateTime(2024, 11, 16, 18, 26, 27, 209, DateTimeKind.Local).AddTicks(2201),
                            UserId = "user2"
                        });
                });

            modelBuilder.Entity("WebApp_Multi_user_chat.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "user1",
                            Password = "password123",
                            UserName = "Alice"
                        },
                        new
                        {
                            UserId = "user2",
                            Password = "password456",
                            UserName = "Bob"
                        });
                });

            modelBuilder.Entity("WebApp_Multi_user_chat.Entities.ChatHistory", b =>
                {
                    b.HasOne("WebApp_Multi_user_chat.Entities.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("WebApp_Multi_user_chat.Entities.ChatMessage", b =>
                {
                    b.HasOne("WebApp_Multi_user_chat.Entities.ChatHistory", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatHistoryHistoryId");

                    b.HasOne("WebApp_Multi_user_chat.Entities.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp_Multi_user_chat.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp_Multi_user_chat.Entities.User", b =>
                {
                    b.HasOne("WebApp_Multi_user_chat.Entities.ChatRoom", null)
                        .WithMany("Users")
                        .HasForeignKey("ChatRoomId");
                });

            modelBuilder.Entity("WebApp_Multi_user_chat.Entities.ChatHistory", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WebApp_Multi_user_chat.Entities.ChatRoom", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
